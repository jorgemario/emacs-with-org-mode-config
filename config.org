* General setup
** Personal information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Jorge M Gomez Cardona"
        user-mail-address "jorgemario@gmail.com")
#+END_SRC
** Defaults
#+BEGIN_SRC emacs-lisp
  ;; These functions are useful. Activate them.
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Keep all backup and auto-save files in one directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top
  (setq-default indent-tabs-mode nil)

  ;; Turn off the blinking cursor
  ;; (blink-cursor-mode -1)

  (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)

  ;; Don't count two spaces after a period as the end of a sentence.
  ;; Just one space is needed.
  (setq sentence-end-double-space nil)

  ;; delete the region when typing, just like as we expect nowadays.
  (delete-selection-mode t)

  (show-paren-mode t)

  (column-number-mode t)

  (global-visual-line-mode)

  (diminish 'visual-line-mode)

  (global-hl-line-mode +1)

  (setq uniquify-buffer-name-style 'forward)

  ;; -i gets alias definitions from .bash_profile
  (setq shell-command-switch "-ic")

  ;; Don't beep at me
  (setq visible-bell nil)
  (setq ring-bell-function (lambda ()
                           (invert-face 'mode-line)
                           (run-with-timer 0.1 nil 'invert-face 'mode-line)
                           ))

  ;; Show line numbers
  (global-linum-mode)

  ;; full path in title bar
  (setq-default frame-title-format "%b (%f)")

  ;; don't pop up font menu
  (global-set-key (kbd "s-t") '(lambda () (interactive)))

  ;; No need for ~ files when editing
  (setq create-lockfiles nil)

  ;; Go straight to scratch buffer on startup
  (setq inhibit-startup-message t)

  ;; Electric pair mode always on
  (electric-pair-mode 1)
#+END_SRC
** OS
#+BEGIN_SRC emacs-lisp
    ;; Don't show native OS scroll bars for buffers because they're redundant
    (when (fboundp 'scroll-bar-mode)
      (scroll-bar-mode -1))

    ;; These settings relate to how emacs interacts with your operating system
    (setq ;; makes killing/yanking interact with the clipboard
          x-select-enable-clipboard t

          ;; I'm actually not sure what this does but it's recommended?
          x-select-enable-primary t

          ;; Save clipboard strings into kill ring before replacing them.
          ;; When one selects something in another program to paste it into Emacs,
          ;; but kills something in Emacs before actually pasting it,
          ;; this selection is gone unless this variable is non-nil
          save-interprogram-paste-before-kill t

          ;; Shows all options when running apropos. For more info,
          ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Apropos.html
          apropos-do-all t

          ;; Mouse yank commands yank at point instead of at click.
          mouse-yank-at-point t)

    ;; exec-path-from-shell makes the command-line path with Emacs’s shell match the same one on OS 
    (use-package exec-path-from-shell
      :if (memq window-system '(mac ns))
      :ensure t
      :init
      (exec-path-from-shell-initialize))

  ;; Mac integration
    (let ((is-mac (string-equal system-type "darwin")))
      (when is-mac
        ;; change meta key
        (setq mac-option-modifier 'super)
        (setq mac-command-modifier 'meta)
      
        ;; delete files by moving them to the trash
        (setq delete-by-moving-to-trash t)
        (setq trash-directory "~/.Trash")

        ;; Don't make new frames when opening a new file with Emacs
        (setq ns-pop-up-frames nil)

        ;; set the Fn key as the hyper key
        (setq ns-function-modifier 'hyper)

        ;; Use Command-` to switch between Emacs windows (not frames)
        (bind-key "s-`" 'other-window)
  
        ;; Use Command-Shift-` to switch Emacs frames in reverse
        (bind-key "s-~" (lambda() () (interactive) (other-window -1)))

        ;; Because of the keybindings above, set one for `other-frame'
        (bind-key "s-1" 'other-frame)

        ;; Fullscreen!
        (setq ns-use-native-fullscreen nil) ; Not Lion style
        (bind-key "<s-return>" 'toggle-frame-fullscreen)

        ;; buffer switching
        (bind-key "s-{" 'previous-buffer)
        (bind-key "s-}" 'next-buffer)

        ;; Compiling
        (bind-key "H-c" 'compile)
        (bind-key "H-r" 'recompile)
        (bind-key "H-s" (defun save-and-recompile () (interactive) (save-buffer) (recompile)))

        ;; disable the key that minimizes emacs to the dock because I don't
        ;; minimize my windows
        ;; (global-unset-key (kbd "C-z"))

        (defun open-dir-in-finder ()
          "Open a new Finder window to the path of the current buffer"
          (interactive)
          (shell-command "open ."))
        (bind-key "s-/" 'open-dir-in-finder)

        (defun open-dir-in-iterm ()
          "Open the current directory of the buffer in iTerm."
          (interactive)
          (let* ((iterm-app-path "/Applications/iTerm.app")
                 (iterm-brew-path "/opt/homebrew-cask/Caskroom/iterm2/1.0.0/iTerm.app")
                 (iterm-path (if (file-directory-p iterm-app-path)
                                 iterm-app-path
                               iterm-brew-path)))
            (shell-command (concat "open -a " iterm-path " ."))))
        (bind-key "s-=" 'open-dir-in-iterm)

        ;; Not going to use these commands
        (put 'ns-print-buffer 'disabled t)
        (put 'suspend-frame 'disabled t)))
#+END_SRC
** Theme
*** Cyberpunk
#+BEGIN_SRC emacs-lisp
  (use-package cyberpunk-theme
    :if (window-system)
    :ensure t
    :init
      ;; (progn
      ;;   (load-theme 'cyberpunk t)
      ;;   (set-face-attribute `mode-line nil
      ;;                       :box nil)
      ;;   (set-face-attribute `mode-line-inactive nil
    ;;                       :box nil))
    )
#+END_SRC
*** Spacemacs
#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-theme
    :ensure t
    :defer t
    :init
    (progn
      (setq spacemacs-theme-comment-bg t)
      (setq spacemacs-theme-org-height t)
      (load-theme 'spacemacs-dark t)))
#+END_SRC
** Font
*** Inconsolata
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'default-frame-alist
  ;;              '(font . "Inconsolata-14"))
#+END_SRC
*** Mononoki
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'default-frame-alist
  ;;              '(font . "mononoki-14"))
#+END_SRC
*** Hack
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Hack-14"))
#+END_SRC
** Global functions
#+BEGIN_SRC emacs-lisp
    (defun sudo-edit (&optional arg)
      "Edit currently visited file as root.

    With a prefix ARG prompt for a file to visit.
    Will also prompt for a file to visit if current
    buffer is not visiting a file."
      (interactive "P")
      (if (or arg (not buffer-file-name))
          (find-file (concat "/sudo:root@localhost:"
                             (ido-read-file-name "Find file(as root): ")))
        (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

    (global-set-key (kbd "C-x C-r") 'sudo-edit)
#+END_SRC
** Navigation
*** Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (require 'which-key)
    (which-key-mode))
#+END_SRC
*** Recentf
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :commands ido-recentf-open
    :init
    (progn
      (recentf-mode t)
      (setq recentf-max-saved-items 200)

      (defun ido-recentf-open ()
        "Use `ido-completing-read' to \\[find-file] a recent file"
        (interactive)
        (if (find-file (ido-completing-read "Find recent file: " recentf-list))
            (message "Opening file...")
          (message "Aborting")))

      (bind-key "C-x C-r" 'ido-recentf-open)))
#+END_SRC
*** List buffers
#+BEGIN_SRC emacs-lisp
  ;; make ibuffer the default buffer lister.
  (defalias 'list-buffers 'ibuffer)
#+END_SRC
*** Ido
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :init
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode t)
    (use-package ido-vertical-mode
      :ensure t
      :init (ido-vertical-mode 1)
      (setq ido-vertical-define-keys 'C-n-and-C-p-only)))
#+END_SRC
** Window
#+BEGIN_SRC emacs-lisp
  ;; Convenient keybindings to resize windows.

  (bind-key "s-C-<left>"  'shrink-window-horizontally)
  (bind-key "s-C-<right>" 'enlarge-window-horizontally)
  (bind-key "s-C-<down>"  'shrink-window)
  (bind-key "s-C-<up>"    'enlarge-window)

  ;; Whenever I split windows, I usually do so and also switch to the other window as well,
  ;; so might as well rebind the splitting key bindings to do just that to reduce the repetition.

  (defun vsplit-other-window ()
    "Splits the window vertically and switches to that window."
    (interactive)
    (split-window-vertically)
    (other-window 1 nil))
  (defun hsplit-other-window ()
    "Splits the window horizontally and switches to that window."
    (interactive)
    (split-window-horizontally)
    (other-window 1 nil))

  (bind-key "C-x 2" 'vsplit-other-window)
  (bind-key "C-x 3" 'hsplit-other-window)

  ;; Enabling winner-mode to restore windows
  (winner-mode 1)

  ;; Enabling windmove 【Shift+→】/ 【Shift+←】/ 【Shift+↓】 / 【Shift+↑】
  (windmove-default-keybindings)
#+END_SRC
** Smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :if (not (featurep 'helm-mode))
    :ensure t
    :bind ("M-x" . smex))
#+END_SRC
** Undo tree
This lets you use C-x u (undo-tree-visualize) to visually walk through the changes you’ve made.
From: [[https://github.com/sachac/.emacs.d/blob/83d21e473368adb1f63e582a6595450fcd0e787c/Sacha.org] [Sacha conf]]
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :defer t
    :ensure t
    :diminish undo-tree-mode
    :config
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :diminish helm-mode
    :init (progn
            (require 'helm-config)
            (use-package helm-projectile
              :ensure t
              :commands helm-projectile
              :bind ("C-c p h" . helm-projectile))
            (use-package helm-ag :defer 10  :ensure t)
            (setq helm-locate-command "mdfind -interpret -name %s %s"
                  helm-ff-newfile-prompt-p nil
                  helm-M-x-fuzzy-match t)
            (helm-mode)
            (use-package helm-swoop :bind ("H-w" . helm-swoop)))
    :bind (("C-c h" . helm-command-prefix)
           ("C-x b" . helm-mini)
           ("C-`" . helm-resume)
           ("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)))
#+END_SRC
** Shell
#+BEGIN_SRC emacs-lisp
  ;;; Fix junk characters in shell-mode
  (add-hook 'shell-mode-hook 
            'ansi-color-for-comint-mode-on)
#+END_SRC
** Auto save (with super-save)
#+BEGIN_SRC emacs-lisp
  (use-package super-save
    :ensure t
    :config
    (progn
      (super-save-mode +1)
      (setq auto-save-default nil)
      ))
#+END_SRC
** Org
#+BEGIN_SRC emacs-lisp
  (setq org-replace-disputed-keys t)
#+END_SRC
** Crux
#+BEGIN_SRC emacs-lisp
  (use-package crux
    :ensure t
    :bind (("C-c u" . crux-view-url)
           ("C-c d" . crux-delete-file-and-buffer)
           ("C-c r" . crux-rename-buffer-and-file)
           ([remap move-beginning-of-line] . crux-move-beginning-of-line)
           ([remap kill-whole-line] . crux-kill-whole-line)
           ("C-c I" . crux-find-user-init-file)))
#+END_SRC
** Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :config (global-undo-tree-mode)
    :bind ("s-/" . undo-tree-visualize))
#+END_SRC
** Goto Last Change
#+BEGIN_SRC emacs-lisp
  (use-package goto-chg
    :ensure t
    :commands goto-last-change
    ;; complementary to
    ;; C-x r m / C-x r l
    ;; and C-<space> C-<space> / C-u C-<space>
    :bind (("C-." . goto-last-change)
           ("C-," . goto-last-change-reverse)))
#+END_SRC
* Code Edit
** Company mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (global-company-mode)
  
    ; use M-TAB, a.k.a. C-M-i, as manual trigger
    (global-set-key (kbd "s-<tab>") #'company-complete))
#+END_SRC
** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
   :ensure t)
#+END_SRC
** Paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :config
    ;; Automatically load paredit when editing a lisp file
    ;; More at http://www.emacswiki.org/emacs/ParEdit
    (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
    (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
    ;; eldoc-mode shows documentation in the minibuffer when writing code
    ;; http://www.emacswiki.org/emacs/ElDoc
    (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
    (global-set-key (kbd "M-[") #'paredit-wrap-square)
    (global-set-key (kbd "M-{") #'paredit-wrap-curly))
#+END_SRC
** Clojure mode
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t
    :config
    ;; Enable paredit for Clojure
    (add-hook 'clojure-mode-hook #'enable-paredit-mode)

    (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)

    ;; This is useful for working with camel-case tokens, like names of
    ;; Java classes (e.g. JavaClassName)
    (add-hook 'clojure-mode-hook #'subword-mode)

    ;; syntax hilighting for midje
    (add-hook 'clojure-mode-hook
              (lambda ()
                (setq inferior-lisp-program "lein repl")
                (font-lock-add-keywords
                 nil
                 '(("(\\(facts?\\)"
                    (1 font-lock-keyword-face))
                   ("(\\(background?\\)"
                    (1 font-lock-keyword-face))))
                (define-clojure-indent (fact 1))
                (define-clojure-indent (facts 1))))

    ;; Use clojure mode for other extensions
    (add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))
    (add-to-list 'auto-mode-alist '("\\.boot$" . clojure-mode))
    (add-to-list 'auto-mode-alist '("\\.cljs.*$" . clojurescript-mode))
    (add-to-list 'auto-mode-alist '("lein-env" . enh-ruby-mode)))


  ;; A little more syntax highlighting
  (use-package clojure-mode-extra-font-locking
    :ensure t)
#+END_SRC
** Clojure refactor
#+BEGIN_SRC emacs-lisp
  (use-package clj-refactor
    :ensure t)
#+END_SRC
** Cider
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t
    :config
    ;; provides minibuffer documentation for the code you're typing into the repl
    (add-hook 'cider-repl-mode-hook #'eldoc-mode)

    ;; go right to the REPL buffer when it's finished connecting
    (setq cider-repl-pop-to-buffer-on-connect t)

    ;; disable cider message
    (setq cider-repl-display-help-banner nil)

    ;; When there's a cider error, show its buffer and switch to it
    (setq cider-show-error-buffer t)
    (setq cider-auto-select-error-buffer t)

    ;; Where to store the cider history.
    (setq cider-repl-history-file "~/.emacs.d/cider-history")

    ;; Wrap when navigating history.
    (setq cider-repl-wrap-history t)

    ;; enable paredit in your REPL
    (add-hook 'cider-repl-mode-hook #'paredit-mode)

q    ;; Instruct CIDER to use Figwheel
    ;; https://cider.readthedocs.io/en/latest/up_and_running/#clojurescript-usage
    (setq cider-cljs-lein-repl "(do (use 'figwheel-sidecar.repl-api) (start-figwheel!) (cljs-repl))")

    (eval-after-load 'cider
    '(progn
       ;;(define-key clojure-mode-map (kbd "C-c C-v") 'cider-start-http-server)
       ;;(define-key clojure-mode-map (kbd "C-M-r") 'cider-refresh)
       (define-key clojure-mode-map (kbd "C-c u") 'cider-user-ns)
       (define-key cider-mode-map (kbd "C-c u") 'cider-user-ns))))
#+END_SRC
** Web mode
#+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :ensure t
      :mode (("\\.html?\\'" . web-mode)
             ("\\.json\\'" . web-mode)
             ("\\.js[x]?\\'" . web-mode))
      :config
      (setq web-mode-content-types-alist
            '(("jsx" . "\\.js[x]?\\'")))

      (setq web-mode-markup-indent-offset 2)
      (setq web-mode-css-indent-offset 2)
      (setq web-mode-code-indent-offset 2)
      (setq web-mode-indent-style 2)
      (setq web-mode-enable-auto-pairing t)
      (setq web-mode-enable-auto-quoting nil)
  
      (setq web-mode-enable-css-colorization t)
  ;;    (idle-highlight-mode 0)

      (defadvice web-mode-highlight-part (around tweak-jsx activate)
        (if (equal web-mode-content-type "jsx")
            (let ((web-mode-enable-part-face nil))
              ad-do-it)
          ad-do-it)))
#+END_SRC
** Scala
*** scala-mode
#+BEGIN_SRC emacs-lisp
  (use-package scala-mode
    :ensure t

    :interpreter ("scala" . scala-mode)

    ;; taken from:
    ;; https://eschulte.github.io/emacs24-starter-kit/starter-kit-scala.html

    :init
    (add-hook 'scala-mode-hook '(lambda ()
    ;; Bind the 'newline-and-indent' command to RET (aka 'enter'). This
    ;; is normally also available as C-j. The 'newline-and-indent'
    ;; command has the following functionality: 1) it removes trailing
    ;; whitespace from the current line, 2) it create a new line, and 3)
    ;; indents it.  An alternative is the
    ;; 'reindent-then-newline-and-indent' command.
    (local-set-key (kbd "RET") 'newline-and-indent)

    ;; Alternatively, bind the 'newline-and-indent' command and
    ;; 'scala-indent:insert-asterisk-on-multiline-comment' to RET in
    ;; order to get indentation and asterisk-insertion within multi-line
    ;; comments.
    (local-set-key (kbd "RET")
                   '(lambda ()
                      (interactive)
                      (newline-and-indent)
                      (scala-indent:insert-asterisk-on-multiline-comment)))

    ;; Bind the backtab (shift tab) to
    ;; 'scala-indent:indent-with-reluctant-strategy command. This is usefull
    ;; when using the 'eager' mode by default and you want to "outdent" a
    ;; code line as a new statement.
    (local-set-key (kbd "<backtab>") 'scala-indent:indent-with-reluctant-strategy))))
#+END_SRC
*** sbt-mode
#+BEGIN_SRC emacs-lisp
  (use-package sbt-mode
    :ensure t
    :commands sbt-start sbt-command
    :config
    ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
    ;; allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map))
#+END_SRC
*** Ensime
#+BEGIN_SRC emacs-lisp
  (use-package ensime
    :ensure t
    :commands ensime ensime-mode
    :config
    (add-hook 'scala-mode-hook 'ensime-mode))
#+END_SRC
* Code Management
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status)
    :config
    (define-key magit-status-mode-map (kbd "q") 'magit-mode-bury-buffer))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :commands projectile-mode
    :init
    (progn
      (setq projectile-enable-caching t)
      (setq projectile-completion-system 'helm)
      (setq projectile-use-git-grep t))
    :config
    (progn
      (projectile-global-mode t)
      (helm-projectile-on)
      (use-package ag
        :commands ag
        :ensure t))
    :bind (("s-f" . projectile-find-file)
           ("s-F" . projectile-grep)
           ("s-E" . projectile-recentf)))
#+END_SRC
